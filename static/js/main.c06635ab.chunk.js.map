{"version":3,"sources":["firebase.js","components/MovieSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","MovieSearch","useState","input","setInput","movies","setMovies","QUERY","fetchMovies","request","a","fetch","then","response","json","catch","err","alert","data","value","setValues","useEffect","unsubscribe","firestore","collection","onSnapshot","snapshot","newMovie","docs","map","doc","id","className","onSubmit","event","preventDefault","name","type","placeholder","onChange","persist","inputs","target","d","l","y","s","onClick","add","title","release","cast","img","i","imageUrl","src","style","width","height","alt","length","movie","key","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"mUAgBAA,IAASC,cAXY,CACjBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKAT,QAAf,ECgFWU,G,MA9FK,WAAO,IAAD,EACIC,mBAAS,MADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAEfG,EAFe,KAEPC,EAFO,KAIlBC,EAAQ,GAENC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACVC,MAJE,oDAIUJ,EAAO,CACrB,OAAU,MACV,QAAW,CACP,kBAAmB,uBACnB,iBAAkB,wDAGrBK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAASC,MAAM,iCACrBL,MAAK,SAAAM,GAAI,OAAId,EAASc,MAVX,2CAAH,sDANK,EAmBKhB,mBAAS,IAnBd,mBAmBfiB,EAnBe,KAmBRC,EAnBQ,KAwDtB,OAnBAC,qBAAU,WACN,IAAMC,EAAc/B,EACfgC,YACAC,WAAW,UACXC,YAAW,SAACC,GACT,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBAC/BC,GAAID,EAAIC,IACLD,EAAIZ,WAGXZ,EAAUqB,MAElB,OAAO,kBAAML,OACd,IAOC,yBAAKU,UAAU,kBACX,0BAAOC,SAtCM,SAACC,GACfA,IACCA,EAAMC,iBACN5B,EAAQ,KAAOY,EAAMiB,KACrB5B,MAkC+BwB,UAAU,eACrC,2BAAOA,UAAU,aAAaK,KAAK,OAAOC,YAAY,WAAWF,KAAK,OAAOG,SAhC/D,SAAAL,GACtBA,EAAMM,UACNpB,GAAU,SAAAqB,GAAM,kCAAStB,GAAT,kBAAiBe,EAAMQ,OAAON,KAAOF,EAAMQ,OAAOvB,YA8BgDA,MAAOA,EAAMiB,OACvH,2BAAOJ,UAAU,SAASK,KAAK,SAASlB,MAAM,UAEjDhB,GACD,wBAAI6B,UAAU,kBACV,wBAAIA,UAAU,aACV,wBAAIA,UAAU,cAAd,UAAmC7B,EAAMwC,EAAE,GAAGC,GAC9C,wBAAIZ,UAAU,gBAAd,YAAuC7B,EAAMwC,EAAE,GAAGE,GAClD,wBAAIb,UAAU,aAAd,SAAiC7B,EAAMwC,EAAE,GAAGG,GAC5C,4BAAQC,QApCH,WAEjBxD,EAASgC,YAAYC,WAAW,UAAUwB,IAAI,CAACC,MAAO9C,EAAMwC,EAAE,GAAGC,EAAGM,QAAS/C,EAAMwC,EAAE,GAAGE,EAAGM,KAAMhD,EAAMwC,EAAE,GAAGG,EAAGM,IAAKjD,EAAMwC,EAAE,GAAGU,EAAEC,aAkCrH,kBAEJ,wBAAItB,UAAU,cAAa,yBAAKuB,IAAKpD,EAAMwC,EAAE,GAAGU,EAAEC,SAAUE,MAAO,CAACC,MAAO,QAASC,OAAQ,SAAUC,IAAK,gBAA3G,MAGJ,yBAAK3B,UAAU,WACX,uCACE3B,EAAOuD,OAAS,GAClB,yBAAK5B,UAAU,kBACV3B,EAAOwB,KAAI,SAAAgC,GAAK,OACb,yBAAK7B,UAAU,eAAe8B,IAAKzD,EAAO0D,QAAQF,IAC9C,yBAAK7B,UAAU,aAAauB,IAAKM,EAAMT,IAAKI,MAAO,CAACC,MAAO,QAASC,OAAQ,SAAUC,IAAK,gBAC3F,wBAAI3B,UAAU,aACV,4BAAI,qCAAW6B,EAAMZ,QACrB,wCAAcY,EAAMX,SACpB,qCAAWW,EAAMV,OAErB,8C,MC5Eba,MATf,WAGI,OACI,yBAAKhC,UAAU,OACX,kBAAC,EAAD,QCGQiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdhE,OAAM,SAAAiE,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c06635ab.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCgxM6ZIiK7UvNESsxpUaWnDx5qp1RLcmA\",\r\n    authDomain: \"movielibrary-d9caa.firebaseapp.com\",\r\n    databaseURL: \"https://movielibrary-d9caa.firebaseio.com\",\r\n    projectId: \"movielibrary-d9caa\",\r\n    storageBucket: \"movielibrary-d9caa.appspot.com\",\r\n    messagingSenderId: \"885902700447\",\r\n    appId: \"1:885902700447:web:1287fb87079aa8f5d1d7aa\",\r\n    measurementId: \"G-HRHDM9GRDM\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase\r\n","import React, {useState, useEffect} from 'react';\r\nimport firebase from '../firebase'\r\nimport './MovieSearch.modules.css';\r\n\r\nconst MovieSearch = () => {\r\n    const [input, setInput] = useState(null);\r\n    const [movies, setMovies] = useState([])\r\n    const API = 'https://imdb8.p.rapidapi.com/title/auto-complete?';\r\n    let QUERY = '';\r\n\r\n    const fetchMovies = async (request) => {\r\n        await fetch(API + QUERY, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"imdb8.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"b4b3d47079mshf8b4532b84c33a1p184711jsn39b88a9d16d1\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(err  => {alert(\"Sorry, no such movie found\")})\r\n            .then(data => setInput(data));\r\n    };\r\n\r\n    const [value, setValues] = useState({});\r\n    const handleSubmit = (event) => {\r\n        if(event){\r\n            event.preventDefault();\r\n            QUERY = 'q=' + value.name;\r\n            fetchMovies();\r\n        }\r\n    };\r\n    const handleInputChange = event => {\r\n        event.persist();\r\n        setValues(inputs => ({...value, [event.target.name]: event.target.value}))\r\n    };\r\n\r\n    const handleButton = () => {\r\n        //setMovies([...movies, {title: input.d[0].l, release: input.d[0].y, cast: input.d[0].s, img: input.d[0].i.imageUrl}])\r\n        firebase.firestore().collection('movies').add({title: input.d[0].l, release: input.d[0].y, cast: input.d[0].s, img: input.d[0].i.imageUrl})\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = firebase\r\n            .firestore()\r\n            .collection('movies')\r\n            .onSnapshot((snapshot) => {\r\n                const newMovie = snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                }));\r\n\r\n                setMovies(newMovie)\r\n            });\r\n        return () => unsubscribe()\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className='MovieContainer'>\r\n            <form  onSubmit={handleSubmit} className='SearchInput'>\r\n                <input className=\"Inputfield\" type='name' placeholder=\"Title...\" name='name' onChange={handleInputChange} value={value.name}/>\r\n                <input className=\"Submit\" type='submit' value='send'/>\r\n            </form>\r\n            {input &&\r\n            <ul className='InputContainer'>\r\n                <ul className='InputText'>\r\n                    <li className='InputTitle'>Title: {input.d[0].l}</li>\r\n                    <li className='InputRelease'>Release: {input.d[0].y}</li>\r\n                    <li className='InputCast'>Cast: {input.d[0].s}</li>\r\n                    <button onClick={handleButton}>Hinzuf√ºgen</button>\r\n                </ul>\r\n                <li className='InputImage'><img src={input.d[0].i.imageUrl} style={{width: \"130px\", height: \"200px\"}} alt={\"title-cover\"}/> </li>\r\n            </ul>\r\n            }\r\n            <div className='Library'>\r\n                <h1>Library</h1>\r\n                {(movies.length > 0) &&\r\n                <div className='LibraryEntries'>\r\n                    {movies.map(movie => (\r\n                        <div className='LibraryEntry' key={movies.indexOf(movie)}>\r\n                            <img className='EntryImage' src={movie.img} style={{width: \"150px\", height: \"200px\"}} alt={\"title-cover\"}/>\r\n                            <ul className='EntryText'>\r\n                                <li><b>Title: {movie.title}</b></li>\r\n                                <li>Release: {movie.release}</li>\r\n                                <li>Cast: {movie.cast}</li>\r\n                            </ul>\r\n                            <p>Delete</p>\r\n                        </div>\r\n                    ))}\r\n                </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MovieSearch","import React from 'react';\nimport MovieSearch from './components/MovieSearch';\nimport './App.css';\n\nfunction App() {\n\n\n    return (\n        <div className=\"App\">\n            <MovieSearch/>\n        </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}